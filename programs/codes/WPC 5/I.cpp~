/* bhupkas */

using namespace std;

#include "bits/stdc++.h"

using std::string;

static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;










typedef long long LL;

const LL N = (LL)(1<<30);

bool P[100005];

vector < LL > p;

void pre()
{
	for(int i = 0 ; i < 100005 ; ++i)	P[i] = true;
	P[0] = P[1] = false;
	for(int i = 2 ; i * i < 100005 ; ++i)
	{
		if(P[i])	
		{
			for(int j = i ; j <= 100005 / i ; ++j)	P[i*j] = false;
		}
	}
	for(int i = 2 ; i < 100005 ; ++i)	if(P[i])	p.push_back((LL)i);
}

LL n,m;

LL pow(LL a , LL b)
{
	LL re = 1LL;
	while(b)
	{
		if(b & 1)	re = re * a;
		a = a * a;
		b >>= 1;
	}
	return re;
}

map < LL , LL > fun(LL num)
{
	map < LL , LL > re;
	for(int i = 0 ; p[i] * p[i] <= num ; ++i)
	{
		if(num % p[i] == 0)
		{
			int cnt = 0;
			while(num % p[i] == 0)
			{
				cnt++;
				num /= p[i];
			}
			re[p[i]] = cnt;
		}
	}	
	if(num != 1)	re[num] = 1;
	return re;
}

map < LL , LL > re1 , re2 , re3 , re4 , re;
map < LL , LL > :: iterator it , it1;

int main()
{	
	pre();
	cout << (LL)p.size() << endl;
	int t;
	cin >> t;
	LL ans;
	while(t--)
	{
		re1.clear() ;
		re2.clear();
		re.clear();
		re3.clear();
		re4.clear();
		cin >> n >> m;
		re1 = fun(n);
		re2 = fun(m);
		
		for(it = re1.begin() ; it != re1.end() ; it++)
		{
			it1 = re2.find((*it).first);
			if(it1 == re2.end())	re3[(*it).first] = (*it).second;
			else	
			{
				if((*it).second <= (*it1).second)	re3[(*it).first] = 0;
				else	re3[(*it).first] = (*it).second;
			}
		}
		
		for(it = re2.begin() ; it != re2.end() ; it++)
		{
			it1 = re1.find((*it).first);
			if(it1 == re1.end())	re4[(*it).first] = (*it).second;
			else	
			{
				if((*it).second <= (*it1).second)	re4[(*it).first] = 0;
				else	re4[(*it).first] = (*it).second;
			}
		}
		
		for(it = re3.begin() ; it != re3.end() ; it++)
		{
			it1 = re4.find((*it).first);
			if(it1 == re4.end())	re[(*it).first] = (*it).second;
			else	re[(*it).first] = max((*it).second,(*it1).second);
		}
		for(it = re4.begin() ; it != re4.end() ; it++)
		{
			it1 = re3.find((*it).first);
			if(it1 == re3.end())	re[(*it).first] = (*it).second;
			else	re[(*it).first] = max((*it).second,(*it1).second);
		}
		ans = 1LL;
		
		for(it = re.begin() ; it != re.end() ; it++)
			ans = ans * pow((*it).first,(*it).second);		
		cout << ans << endl;
	}		
	return 0;
}
