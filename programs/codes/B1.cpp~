/* bhupkas */

using namespace std;

#include "bits/stdc++.h"

using std::string;

static struct IO {
	char tmp[1 << 10];

	// fast input routines
	char cur;

//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }

	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }

	inline IO& operator >> (char & c) { c = nextChar(); return *this; }

	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }

	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }

	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}

#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}

defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)

	// fast output routines

//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }

	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }

	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }


#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }

defineOutFor(int)
defineOutFor(long long)

#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;



typedef long long LL;

const int N = (int)(1e6 + 5);

int A[N],B[N],C[N];

typedef long long LL;

map < pair < int , int > , LL > mymap;
map < pair < int , int > , LL > :: iterator it;

char S[N];

int main()
{
	cin >> S;
	int n = strlen(S);
	if(S[0] == 'A')	A[0]++;
	else if(S[0] == 'B')	B[0]++;
	else 	C[0]++;
	for(int i = 1 ; i < n ; ++i)	
	{
		A[i] = A[i-1];
		B[i] = B[i-1];
		C[i] = C[i-1];
		if(S[i] == 'A')	A[i]++;
		else if(S[i] == 'B')	B[i]++;
		else 	C[i]++;
	}
	pair < int , int >  p1,p2;
	p1.first = 0;
	p1.second= 0;
	mymap[p1] = 0LL;
	LL re = 0;
	for(int i = 0 ; i < n ; ++i)
	{
		p1.first = B[i] - A[i];
		p1.second = B[i] - C[i];
		
		it = mymap.find(p1);
		if(it != mymap.end())
			mymap[p1]++ , re += mymap[p1];
		else	mymap[p1] = 0LL;		
		p1.first = A[i];
		p1.second.first = B[i];
		p1.second.second = C[i];
		ok = false;
		if(A[i] && B[i] && C[i])
		{
			mn = min(A[i],min(B[i],C[i]));
			for(int j = 1 ; j <= mn ; ++j)
			{
				p2.first = A[i]-j;
				p2.second.first = B[i]-j;
				p2.second.second = C[i]-j;
				it = mymap.find(p2);
				if(it != mymap.end())
				{
					mymap[p1] = mymap[p2]+1LL; 
					ok = true;
					break;	
				}
			}
		}
		if(!ok)	mymap[p1] = 0LL;
		re += mymap[p1];
	}
	cout << re << endl;
	return 0;
}
