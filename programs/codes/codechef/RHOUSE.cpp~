/* bhupkas */

using namespace std;

#include "bits/stdc++.h"

typedef long long LL;

struct node
{
	int x,y,cost;
};

typedef struct node Node;

Node N[400005];

bool cmp(Node N1 , Node N2)
{
	return N1.cost < N2.cost;
}

int n,m;

bool B[100005];

int P[100005];
int SZ[100005];

int find(int a)
{	
	if(P[a] == a)	return a;
	int p = find(P[a]);
	return P[a] = p;
}

bool issame(int a , int b)
{
	return find(a) == find(b);
}
void uni(int a , int b)
{
	int p1 = find(a);
	int p2 = find(b);
	B[p1] = B[p2] = B[p1] || B[p2] ;
	if(SZ[p1] > SZ[p2])
	{	
		P[p2] = p1;
		SZ[p1] += SZ[p2];
		SZ[p2] = 0;		
	}
	else
	{
		P[p1] = p2;
		SZ[p2] += SZ[p1];
		SZ[p1] = 0;
	}
}

int main()
{
	int t;
	cin >> t;
	while(t--)
	{	
	
		string str;
		cin >> n >> m;
		cin >> str;
		
		for(int i = 0 ; i < n ; ++i)	
		{
			if(str[i] == 'R')	B[i] = true;
			else	B[i] = false;
		}
		
		for(int i = 0 ; i < m ; ++i)
		{
			cin >> N[i].x >> N[i].y >> N[i].cost;
			N[i].x--;
			N[i].y--;	
		}
		
		sort(N,N+m,cmp);
		
		for(int i = 0 ; i < n ; ++i)	P[i] = i;
		for(int i = 0 ; i < n ; ++i)	SZ[i] = 1;

		LL re = 0;

		for(int i = 0 ; i < m ; ++i)
		{
			if(N[i].cost <= 0)	uni(N[i].x,N[i].y) , re += N[i].cost;
			else
			{
				if(!issame(N[i].x,N[i].y))
				{
					int p1 = find(N[i].x);
					int p2 = find(N[i].y);
					if(!B[p1] || !B[p2])	uni(N[i].x,N[i].y) , re += N[i].cost; 
				}
			}
		}
		cout << re << endl;
	}
	return 0;
}
